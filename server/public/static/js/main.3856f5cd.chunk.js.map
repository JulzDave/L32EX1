{"version":3,"sources":["comp/newstudent.js","comp/mapper.js","comp/viewcourse.js","comp/newcourse.js","comp/home.js","App.js","serviceWorker.js","index.js"],"names":["NewStudent","state","password","Math","random","toString","substr","name","age","course","img","classer","classer2","react_default","a","createElement","className","this","type","required","placeholder","value","onChange","handleChange","bind","id","onClick","fetcher","ev","setState","Object","defineProperty","target","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","res","json","content","msg","alert","Component","Mapper","props","deleter","title","src","alt","imgval","nameval","ViewCourse","courseid","data","courseType","_this2","map","mapper","key","val","coursetype","items","course_name","NewCourse","tutor","Home","App","allstudents","BrowserRouter","Link","to","role","aria-label","Route","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3856f5cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass NewStudent extends Component {\n  state = {\n    password: Math.random().toString(36).substr(2, 9),\n    name: \"\",\n    age: \"\",\n    course: \"\",\n    img: \"\",\n    classer:\"invisi\",\n    classer2:\"visi\"\n  }\n\n\n\n  render() {\n\n    return (\n      <div>\n      <div className={this.state.classer2}><br /><br /><br />\n        <h4>Insert new student to database <br/>OR<br/> Update existing student via auto generated key </h4><br />\n        <input type='text' required placeholder='Enter name' name='name' value={this.state.name} onChange={this.handleChange.bind(this)}></input><br />\n        <input type='number' required placeholder='Enter age' name='age' value={this.state.age} onChange={this.handleChange.bind(this)}></input><br />\n        <input type='text' required placeholder='Enter course id' name='course' value={this.state.course} onChange={this.handleChange.bind(this)}></input><br /><br />\n        <input type='text' id='idd' placeholder='make a unique id' name='password' value={this.state.password} onChange={this.handleChange.bind(this)}></input><br />\n        <input type='text' required placeholder='Insert pic url' name='img' value={this.state.img} onChange={this.handleChange.bind(this)}></input><br /><br />\n        <input type=\"submit\" onClick={this.fetcher.bind(this)} value=\"Submit\"></input>\n        <br/><br/>\n        </div>\n        <p className={this.state.classer}>Thanks for signing {this.state.name}!</p>\n        \n      </div>\n    );\n  }\n  handleChange(ev) {\n    this.setState({ [ev.target.name]: ev.target.value })\n  }\n\n  async fetcher() {\n    var res = await fetch('http://localhost:3000/newstudent', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.state)\n    });\n    // eslint-disable-next-line\n    const content = await res.json();\nif(content.msg){\n  alert(content.msg)\n}\nelse{\n    this.setState({classer:\"vs\"})\n    this.setState({classer2:\"invisi\"})\n  }\n  }\n\n}\n\nexport default NewStudent;\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Mapper extends Component {\n\n  render() {\n    return (<div className=\"items\">\n      <h2 >\n        {\n          this.props.name\n        }\n      </h2>\n      <span onClick={this.deleter.bind(this)} title={\"delete \" + this.props.name} className=\"x\">&times;</span>\n      <p>age: {this.props.age}</p><br />\n      <img className=\"itemImg\" src={this.props.img} alt={this.props.name} /><br />\n      <p>Attending course: {this.props.course}</p>\n    </div>\n    );\n  }\n\n  async deleter() {\n    var imgval = this.props.img\n    var nameval = this.props.name\n    debugger;\n    var res = await fetch('http://localhost:3000/deleter?img=' + imgval + \"&name=\"+ nameval)\n\n     // eslint-disable-next-line\n    const content = await res.json();\n    this.props.fetcher()\n\n  }\n\n}\n\nexport default Mapper;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport Mapper from './mapper';\n\nclass ViewCourse extends Component {\n    state = {\n        courseid: \"\",\n        data: [],\n        courseType: \"\"\n    }\n    render() {\n        return (\n\n            <div className=\"new\"><br /><br /><br />\n                <h4>View a course from the database</h4><br />\n                <input type='text' id=\"courseid\" placeholder='Enter course ID' name='courseid' value={this.state.courseid} onChange={this.handleChange.bind(this)}></input><br /><br />\n               \n                <input type=\"submit\" onClick={this.fetcher.bind(this)} value=\"view\"></input>\n                <div>\n                    <br />\n                    <h2>{this.state.courseType}</h2>\n                    {this.state.data.map(a => <Mapper name={a.name} age={a.age} course={a.course} img={a.img} fetcher={this.fetcher.bind(this)} key={Math.random().toString(36).substr(2, 9)} />)}\n                </div>\n            </div>\n        );\n    }\n    handleChange(ev) {\n        this.setState({ [ev.target.name]: ev.target.value })\n    }\n\n    async fetcher() {\n        var val = this.state.courseid;\n        var res = await fetch('http://localhost:3000/viewcourse?courseid=' + val);\ndebugger;\n        const content = await res.json();\n\n        if (content.coursetype[0]) {\n            this.setState({ data: content.items, courseType: \"Selected Course: \" + content.coursetype[0].course_name })\n        }\n        else {\n            alert(\"No such course\")\n        }\n    }\n\n}\n\nexport default ViewCourse;\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass NewCourse extends Component {\n    state={\n        course_name:\"\",\n        tutor:\"\",\n        classer:\"invisi\",\n        classer2:\"visi\"\n    }\n  render() {\n    return (\n      <div>\n      <div className={this.state.classer2}><br /><br /><br />\n      <h4>Insert new course to database</h4><br/>\n        <input type='text' placeholder='Enter course name' name='course_name' value={this.state.course_name} onChange={this.handleChange.bind(this)}></input><br/>\n        <input type='text' placeholder='Enter tutor name' name='tutor' value={this.state.tutor} onChange={this.handleChange.bind(this)}></input><br/><br/>\n        <input type=\"submit\" onClick={this.fetcher.bind(this)} value=\"Submit\"></input>\n      </div>\n      <br/><br/>\n      <p className={this.state.classer}>Course created!</p>\n        </div>\n    );\n  }\n  handleChange(ev){\n      this.setState({[ev.target.name]:ev.target.value})\n  }\n\n  async fetcher(){\n      var res = await fetch('http://localhost:3000/newcourse', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.state)\n      });\n      // eslint-disable-next-line \n      const content = await res.json(); \n      if(content.msg){\n        alert(content.msg)\n      }\n      else{\n          this.setState({classer:\"vs2\"})\n          this.setState({classer2:\"invisi\"})\n        }\n  }\n}\n\nexport default NewCourse;\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Home extends Component {\n    \n  render() {\n    return (\n      <div className=\"new\"><br/><br/><br/>\n      <h4>Welcome to this website!</h4><br/>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport NewStudent from './comp/newstudent';\nimport ViewCourse from './comp/viewcourse';\nimport NewCourse from './comp/newcourse';\nimport Home from './comp/home';\n\nclass App extends Component {\n  state = { allstudents: \"\" }\n  render() {\n    return (\n      <Router>\n\n        <div className=\"App\">\n        <Link to=\"/newstudent\">New Student</Link>\n        <Link to=\"/newcourse\">New Course</Link>\n        <Link to=\"/viewcourse\">View Course</Link>\n        <Link className=\"home\" to=\"/\"><span role=\"img\" aria-label=\"home\">&#x1F3E0;</span></Link>\n        \n        <Route path=\"/newstudent\" component={NewStudent} />\n        <Route path=\"/newcourse\" component={NewCourse} />\n        <Route path=\"/viewcourse\" component={ViewCourse} />\n        <Route exact path=\"/\" component={Home} />\n       \n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}