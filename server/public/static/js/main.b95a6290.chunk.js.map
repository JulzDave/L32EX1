{"version":3,"sources":["comp/newstudent.js","comp/viewcourse.js","comp/newcourse.js","comp/home.js","App.js","serviceWorker.js","index.js"],"names":["NewStudent","state","password","name","age","course","img","id","Math","random","toString","substr","this","document","getElementById","value","react_default","a","createElement","className","type","placeholder","onChange","handleChange","bind","onClick","ID","fetcher","ev","setState","Object","defineProperty","target","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","res","json","Component","ViewCourse","courseid","action","NewCourse","course_name","tutor","Home","App","allstudents","BrowserRouter","Link","to","Route","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b95a6290.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass NewStudent extends Component {\n    state={\n        password:\"\",\n        name:\"\",\n        age:\"\",\n        course:\"\",\n        img:\"\"\n    }\n    \n    //     var privateName = ID();\n//     var o = { 'public': 'foo' };\n//     o[privateName] = 'bar';\n\n ID () {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  var id = Math.random().toString(36).substr(2, 9);\n  debugger;\n  this.state.password = id\n  document.getElementById(\"idd\").value=id\n};\n  render() {\n    return (\n      <div className=\"new\"><br/><br/><br/>\n      <h4>Insert\\Update new student to database</h4><br/>\n        <input type='text' placeholder='Enter name' name='name' value={this.state.name} onChange={this.handleChange.bind(this)}></input><br/>\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type='text' id='idd' placeholder='make a unique id' name='password' value={this.state.password} onChange={this.handleChange.bind(this)}></input><button onClick={this.ID.bind(this)}>Generate</button><br/>\n        <input type='number' placeholder='Enter age' name='age' value={this.state.age} onChange={this.handleChange.bind(this)}></input><br/>\n        <input type='text' placeholder='Enter course id' name='course' value={this.state.course} onChange={this.handleChange.bind(this)}></input><br/><br/>\n        <input type='text' placeholder='Insert pic url' name='img' value={this.state.img} onChange={this.handleChange.bind(this)}></input><br/><br/>\n        <input type=\"submit\" onClick={this.fetcher.bind(this)} value=\"Submit\"></input>\n      </div>\n    );\n  }\n  handleChange(ev){\n      this.setState({[ev.target.name]:ev.target.value})\n  }\n\n  async fetcher(){\n      var res = await fetch('http://localhost:3000/newstudent', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.state)\n      });\n      const content = await res.json();\n  }\n  \n}\n\nexport default NewStudent;\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass ViewCourse extends Component {\n    state = {\n        courseid: \"\",\n        name: \"\",\n        age: \"\"\n    }\n    render() {\n        return (\n            <div className=\"new\"><br /><br /><br />\n                <form method='post' action='\\viewcourse'>\n                    <h4>View a course from the database</h4><br />\n                    <input type='text' placeholder='Enter course ID' name='courseid' value={this.state.courseid} onChange={this.handleChange.bind(this)}></input><br /><br />\n                    {/* <input type='text' placeholder='Enter pet name' name='name' value={this.state.name} onChange={this.handleChange.bind(this)}></input><br/>\n        <input type='text' placeholder='Enter pet age' name='age' value={this.state.age} onChange={this.handleChange.bind(this)}></input><br/><br/> */}\n                    <input type=\"submit\" value=\"view\"></input>\n                </form>\n            </div>\n        );\n    }\n    handleChange(ev) {\n        this.setState({ [ev.target.name]: ev.target.value })\n    }\n\n    async fetcher() {\n        var res = await fetch('http://localhost:3000/viewcourse', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state)\n        });\n        const content = await res.json();\n    }\n}\n\nexport default ViewCourse;\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass NewCourse extends Component {\n    state={\n        course_name:\"\",\n        tutor:\"\"\n    }\n  render() {\n    return (\n      <div className=\"new\"><br/><br/><br/>\n      <h4>Insert new course to database</h4><br/>\n        <input type='text' placeholder='Enter course name' name='course_name' value={this.state.course_name} onChange={this.handleChange.bind(this)}></input><br/>\n        <input type='text' placeholder='Enter tutor name' name='tutor' value={this.state.tutor} onChange={this.handleChange.bind(this)}></input><br/><br/>\n        <input type=\"submit\" onClick={this.fetcher.bind(this)} value=\"Submit\"></input>\n      </div>\n    );\n  }\n  handleChange(ev){\n      this.setState({[ev.target.name]:ev.target.value})\n  }\n\n  async fetcher(){\n      var res = await fetch('http://localhost:3000/newcourse', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.state)\n      });\n      const content = await res.json();\n  }\n}\n\nexport default NewCourse;\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Home extends Component {\n    \n  render() {\n    return (\n      <div className=\"new\"><br/><br/><br/>\n      <h4>Welcome to this website!</h4><br/>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport NewStudent from './comp/newstudent';\nimport ViewCourse from './comp/viewcourse';\nimport NewCourse from './comp/newcourse';\nimport Home from './comp/home';\n\nclass App extends Component {\n  state = { allstudents: \"\" }\n  render() {\n    return (\n      <Router>\n\n        <div className=\"App\">\n        <Link to=\"/newstudent\">New Student</Link>\n        <Link to=\"/newcourse\">New Course</Link>\n        <Link to=\"/viewcourse\">View Course</Link>\n        <Link className=\"home\" to=\"/\">&#x1F3E0;</Link>\n        <Route path=\"/newstudent\" component={NewStudent} />\n        \n        <Route path=\"/newcourse\" component={NewCourse} />\n        <Route path=\"/viewcourse\" component={ViewCourse} />\n        <Route exact path=\"/\" component={Home} />\n       \n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}