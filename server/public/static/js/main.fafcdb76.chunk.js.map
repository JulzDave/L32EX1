{"version":3,"sources":["comp/newstudent.js","comp/viewcourse.js","comp/newcourse.js","App.js","serviceWorker.js","index.js"],"names":["NewStudent","state","name","age","course","img","react_default","a","createElement","className","type","placeholder","value","this","onChange","handleChange","bind","onClick","fetcher","ev","setState","Object","defineProperty","target","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","res","json","Component","ViewCourse","courseid","action","NewCourse","course_name","tutor","App","allstudents","BrowserRouter","Route","path","component","newstudent","newcourse","viewcourse","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fafcdb76.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass NewStudent extends Component {\n    state={\n        name:\"\",\n        age:\"\",\n        course:\"\",\n        img:\"\"\n    }\n  render() {\n    return (\n      <div className=\"new\"><br/><br/><br/>\n      <h4>Insert new student to database</h4><br/>\n        <input type='text' placeholder='Enter name' name='name' value={this.state.name} onChange={this.handleChange.bind(this)}></input><br/>\n        <input type='number' placeholder='Enter age' name='age' value={this.state.age} onChange={this.handleChange.bind(this)}></input><br/>\n        <input type='text' placeholder='Enter course id' name='course' value={this.state.course} onChange={this.handleChange.bind(this)}></input><br/><br/>\n        <input type='text' placeholder='Insert pic url' name='img' value={this.state.img} onChange={this.handleChange.bind(this)}></input><br/><br/>\n        <input type=\"submit\" onClick={this.fetcher.bind(this)} value=\"Submit\"></input>\n      </div>\n    );\n  }\n  handleChange(ev){\n      this.setState({[ev.target.name]:ev.target.value})\n  }\n\n  async fetcher(){\n      var res = await fetch('http://localhost:3000/newstudent', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.state)\n      });\n      const content = await res.json();\n  }\n}\n\nexport default NewStudent;\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass ViewCourse extends Component {\n    state = {\n        courseid: \"\",\n        name: \"\",\n        age: \"\"\n    }\n    render() {\n        return (\n            <div className=\"new\"><br /><br /><br />\n                <form method='post' action='\\viewcourse'>\n                    <h4>View a course from the database</h4><br />\n                    <input type='text' placeholder='Enter course ID' name='courseid' value={this.state.courseid} onChange={this.handleChange.bind(this)}></input><br /><br />\n                    {/* <input type='text' placeholder='Enter pet name' name='name' value={this.state.name} onChange={this.handleChange.bind(this)}></input><br/>\n        <input type='text' placeholder='Enter pet age' name='age' value={this.state.age} onChange={this.handleChange.bind(this)}></input><br/><br/> */}\n                    <input type=\"submit\" value=\"view\"></input>\n                </form>\n            </div>\n        );\n    }\n    handleChange(ev) {\n        this.setState({ [ev.target.name]: ev.target.value })\n    }\n\n    async fetcher() {\n        var res = await fetch('http://localhost:3000/viewcourse', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.state)\n        });\n        const content = await res.json();\n    }\n}\n\nexport default ViewCourse;\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass NewCourse extends Component {\n    state={\n        course_name:\"\",\n        tutor:\"\"\n    }\n  render() {\n    return (\n      <div className=\"new\"><br/><br/><br/>\n      <h4>Insert new course to database</h4><br/>\n        <input type='text' placeholder='Enter course name' name='course_name' value={this.state.course_name} onChange={this.handleChange.bind(this)}></input><br/>\n        <input type='text' placeholder='Enter tutor name' name='tutor' value={this.state.tutor} onChange={this.handleChange.bind(this)}></input><br/><br/>\n        <input type=\"submit\" onClick={this.fetcher.bind(this)} value=\"Submit\"></input>\n      </div>\n    );\n  }\n  handleChange(ev){\n      this.setState({[ev.target.name]:ev.target.value})\n  }\n\n  async fetcher(){\n      var res = await fetch('http://localhost:3000/newcourse', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.state)\n      });\n      const content = await res.json();\n  }\n}\n\nexport default NewCourse;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport NewStudent from './comp/newstudent';\nimport ViewCourse from './comp/viewcourse';\nimport NewCourse from './comp/newcourse';\n\nclass App extends Component {\n  state = { allstudents: \"\" }\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n        <Route path=\"/newstudent\" component={NewStudent} />\n        <NewStudent/>\n        <Route path=\"/newcourse\" component={NewCourse} />\n        <NewCourse/>\n        <ViewCourse/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}